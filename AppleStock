import pandas as pd
import yfinance as yf
import datetime
from sklearn.preprocessing import RobustScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Bidirectional, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.regularizers import l1
from ta.momentum import RSIIndicator, ROCIndicator, PercentagePriceOscillator
from ta.volatility import BollingerBands
from ta.trend import EMAIndicator, MACD, CCIIndicator
from ta.volume import ChaikinMoneyFlowIndicator
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt



# Set random seed
tf.random.set_seed(42)

# Download stock data
ticker = 'AAPL'
end_date = datetime.datetime.today() - datetime.timedelta(days=14)  # Go back two weeks for the end date
start_date = end_date - datetime.timedelta(days=365*3)

stock_data_daily = yf.download(ticker, start=start_date.strftime('%Y-%m-%d'), end=end_date.strftime('%Y-%m-%d'), interval='1d')

# Add technical indicators
stock_data_daily['SMA'] = stock_data_daily['Close'].rolling(window=5).mean()
stock_data_daily['RSI'] = RSIIndicator(close=stock_data_daily['Close']).rsi()
stock_data_daily['EMA'] = EMAIndicator(close=stock_data_daily['Close']).ema_indicator()
bb = BollingerBands(close=stock_data_daily['Close'])
stock_data_daily['BB_upper'] = bb.bollinger_hband()
stock_data_daily['BB_lower'] = bb.bollinger_lband()
stock_data_daily['ROC'] = ROCIndicator(close=stock_data_daily['Close']).roc()
macd = MACD(close=stock_data_daily['Close'])
stock_data_daily['MACD'] = macd.macd()
stock_data_daily['PPO'] = PercentagePriceOscillator(close=stock_data_daily['Close']).ppo()
stock_data_daily['CCI'] = CCIIndicator(high=stock_data_daily['High'], low=stock_data_daily['Low'], close=stock_data_daily['Close'], window=20).cci()

# Prepare data for ARIMA
arima_data = stock_data_daily['Close'].diff().dropna()
arima_model = ARIMA(arima_data, order=(5,1,0))
arima_model_fit = arima_model.fit()

# Predict
arima_forecast = arima_model_fit.predict(start=1, end=len(arima_data))

# Add the predicted values from ARIMA as a new feature to the LSTM model data
stock_data_daily['ARIMA_Predictions'] = pd.Series(arima_data[0], index=arima_data.index).append(arima_forecast).cumsum()

# Create the target variable
stock_data_daily['Target'] = np.where(stock_data_daily['Close'].shift(-1) > stock_data_daily['Close'], 1, 0)
stock_data_daily.dropna(inplace=True)  # drop the last row which is NaN

# Preprocess the data
def preprocess_data(data):
    data = data[['Close', 'SMA', 'RSI', 'EMA', 'BB_upper', 'BB_lower', 'ROC', 'MACD', 'PPO', 'CCI', 'ARIMA_Predictions']].values

    scaler = RobustScaler()
    scaled_data = scaler.fit_transform(data)
    return scaled_data, scaler

scaled_data_daily, scaler_daily = preprocess_data(stock_data_daily)

# Prepare training data
def prepare_training_data(scaled_data, target, look_back):
    X = []
    y = []

    for i in range(look_back, len(scaled_data)):
        X.append(scaled_data[i - look_back:i])
        y.append(target[i])

    X, y = np.array(X), np.array(y)
    X = np.reshape(X, (X.shape[0], X.shape[1], X.shape[2]))

    return X, y

look_back = 700
X, y = prepare_training_data(scaled_data_daily, stock_data_daily['Target'].values, look_back)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the LSTM model
def build_model():
    model = Sequential()
    model.add(Bidirectional(LSTM(50, return_sequences=True, kernel_regularizer=l1(0.01)), input_shape=(look_back, 11)))  # Add l1 regularization
    model.add(Dropout(0.2))
    model.add(Bidirectional(LSTM(50, return_sequences=False, kernel_regularizer=l1(0.01))))  # Add l1 regularization
    model.add(Dropout(0.2))
    model.add(Dense(25, kernel_regularizer=l1(0.01)))  # Add l1 regularization
    model.add(Dense(1, activation='sigmoid'))
    return model

model_daily = build_model()

# Compile and train the model
optimizer = Adam(learning_rate=0.001)
early_stopping = EarlyStopping(monitor='val_loss', patience=5)

model_daily.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
model_daily.fit(X_train, y_train, batch_size=100, epochs=20, validation_split=0.1, callbacks=[early_stopping])

# Evaluate the model's performance
loss, accuracy = model_daily.evaluate(X_test, y_test)
print(f"Model accuracy: {accuracy:.4f}")

# Test the model and predict the next day's price direction
def predict_direction(model, data):
    test_data = data[-look_back:]
    X_test = np.reshape(test_data, (1, look_back, 11))  # updated to 11 to match the number of features
    predicted_direction = model.predict(X_test)
    return predicted_direction > 0.5  # return True for up, False for down

# Run prediction for the next day
direction = predict_direction(model_daily, scaled_data_daily)

date_to_predict = datetime.datetime.today() - datetime.timedelta(days=6)  # This is the date a week ago
next_day = date_to_predict + datetime.timedelta(days=1)

if direction:
    print(f"The model predicts the closing price for {ticker} on {next_day.strftime('%Y-%m-%d')} was higher than the closing price on {date_to_predict.strftime('%Y-%m-%d')}.")
else:
    print(f"The model predicts the closing price for {ticker} on {next_day.strftime('%Y-%m-%d')} was lower than the closing price on {date_to_predict.strftime('%Y-%m-%d')}.")
